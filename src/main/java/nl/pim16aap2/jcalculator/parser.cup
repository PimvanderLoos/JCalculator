package nl.pim16aap2.jcalculator;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.OptionalDouble;

parser code
{:
    private static final Variables EMPTY_VARIABLES = new Variables(Collections.emptyList(), new double[0]);

    private Variables variables = EMPTY_VARIABLES;
    private List<Double> results = new ArrayList();

    public void setVariables(final Variables variables)
    {
        this.variables = variables;
    }

    private double getVariable(String word)
    {
        System.out.println("Checking word: " + word);
        final OptionalDouble val = variables.getValue(word);
        if (val.isPresent())
            return val.getAsDouble();
        throw new IllegalStateException("Failed to get value of parameter \"" + word +
                                            "\" in variables: " + variables.toString());
    }

    public void addResult(double val)
    {
        results.add(val);
    }

    public List<Double> getResults()
    {
        return results;
    }
:}

terminal        SEMI, PLUS, MINUS, TIMES, DIVIDE, MIN, MAX, SQRT, EXP, ABS, COMMA, MOD, SIN, ASIN, COS, ACOS, TAN, ATAN,
                ATAN2, LOG, LN;
terminal        UMINUS, LPAREN, RPAREN;
terminal Double NUMBER, PI, E;
terminal String WORD;

non terminal expr_list, expr_part;
non terminal Double expr;

precedence left  PLUS, MINUS, TIMES, DIVIDE, MOD;
precedence left  UMINUS;
precedence right EXP;

expr_list ::= expr_list expr_part
          |
              expr_part;

expr_part ::= expr:e
          {: parser.addResult(e); RESULT = e; :}
              SEMI
          ;

expr      ::= expr:e1 PLUS expr:e2
          {: RESULT = new Double(e1.doubleValue() + e2.doubleValue()); :}
          |
              expr:e1 MINUS expr:e2
          {: RESULT = new Double(e1.doubleValue() - e2.doubleValue()); :}
          |
              expr:e1 TIMES expr:e2
          {: RESULT = new Double(e1.doubleValue() * e2.doubleValue()); :}
          |
              expr:e1 DIVIDE expr:e2
          {: RESULT = new Double(e1.doubleValue() / e2.doubleValue()); :}
          |
              expr:e1 EXP expr:e2
          {: RESULT = Math.pow(e1, e2); :}
          |
              expr:e1 MOD expr:e2
          {: RESULT = new Double(e1.doubleValue() % e2.doubleValue()); :}
          |
              MIN LPAREN expr:e1 COMMA expr:e2 RPAREN
          {: RESULT = new Double(Math.min(e1, e2)); :}
          |
              MAX LPAREN expr:e1 COMMA expr:e2 RPAREN
          {: RESULT = new Double(Math.max(e1, e2)); :}
          |
              ABS LPAREN expr:e RPAREN
          {: RESULT = new Double(Math.abs(e)); :}
          |
              SQRT LPAREN expr:e RPAREN
          {: RESULT = Math.sqrt(e); :}
          |
              SIN LPAREN expr:e RPAREN
          {: RESULT = Math.sin(e); :}
          |
              ASIN LPAREN expr:e RPAREN
          {: RESULT = Math.asin(e); :}
          |
              COS LPAREN expr:e RPAREN
          {: RESULT = Math.cos(e); :}
          |
              ACOS LPAREN expr:e RPAREN
          {: RESULT = Math.acos(e); :}
          |
              TAN LPAREN expr:e RPAREN
          {: RESULT = Math.tan(e); :}
          |
              ATAN LPAREN expr:e RPAREN
          {: RESULT = Math.atan(e); :}
          |
              ATAN2 LPAREN expr:e1 COMMA expr:e2 RPAREN
          {: RESULT = Math.atan2(e1, e2); :}
          |
              LOG LPAREN expr:e RPAREN
          {: RESULT = Math.log10(e); :}
          |
              LN LPAREN expr:e RPAREN
          {: RESULT = Math.log(e); :}
          |
              NUMBER:n
          {: RESULT = n; :}
          |
              PI:n
          {: RESULT = Math.PI; :}
          |
              E:n
          {: RESULT = Math.E; :}
          |
              MINUS expr:e
          {: RESULT = new Double(0 - e.doubleValue()); :}
          %prec UMINUS
          |
              LPAREN expr:e RPAREN
          {: RESULT = e; :}
          |

              WORD:s
          {: RESULT = parser.getVariable(s); :}
          ;

